<?xml version="1.0" encoding="UTF-8"?>
<!-- Generator: Adobe Illustrator 24.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 64 64" style="enable-background:new 0 0 64 64;" xml:space="preserve"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script>
<style xmlns="http://www.w3.org/2000/svg" type="text/css">
	.st0{fill:#262626;}
</style>
<path xmlns="http://www.w3.org/2000/svg" class="st0" d="M62.7035713,38.8464279l-11.5035706-7.1374989v-3.5035725  c3.7214279-3.0017853,5.9035721-7.5107136,5.9035721-12.3357134C57.1035728,7.1196427,49.9821434,0,41.2321434,0  C34.231472,0,28.179018,4.6058035,26.1363831,11.1511164c-1.0886154-0.2368307-2.2118301-0.377902-3.3703117-0.377902  c-8.75,0-15.8696423,7.1196423-15.8696423,15.8696423c0,4.826786,2.1803575,9.3357162,5.9017854,12.3357162v3.5035706  L1.2964286,49.6178589C0.4910714,50.1214294,0,51,0,51.9500008l0.0017857,9.3071404C0.0017857,62.7714272,1.2303572,64,2.744643,64  c1.5160711,0,2.7428572-1.2285728,2.7428572-2.7428589l-0.0017858-7.7821426l11.5017853-7.1357117  c0.805357-0.5035744,1.2964287-1.3821449,1.2964287-2.3321457v-6.4178543c0-0.9214287-0.4624996-1.7821426-1.2303562-2.2892876  c-2.9250002-1.9321404-4.6714287-5.1678562-4.6714287-8.6571426c0-5.7250004,4.6589279-10.3839283,10.3839283-10.3839283  s10.3839302,4.6589279,10.3839302,10.3839283c0,3.4892864-1.7464294,6.7250023-4.6714306,8.6571426  c-0.7696419,0.5071449-1.2321415,1.3678589-1.2321415,2.2892876v6.4178543c0,0.9500008,0.4910698,1.8285713,1.2964268,2.3321457  l11.5035725,7.1357117v7.7821426C40.0464287,62.7714272,41.2750015,64,42.7892876,64  c1.5142822,0,2.7428551-1.2285728,2.7428551-2.7428589v-9.3071404c0-0.9500008-0.4892845-1.8285713-1.2964287-2.3321419  l-11.5035706-7.1357155v-3.5035706c3.7214279-3,5.9035721-7.5089302,5.9035721-12.3357162  c0-5.6372757-2.9758949-10.5654011-7.4183044-13.3812494c1.1787949-4.5357141,5.2613831-7.7758927,10.0147324-7.7758927  c5.7249985,0,10.3857155,4.6589284,10.3857155,10.3839283c0,3.4875002-1.7464294,6.7249994-4.6750031,8.6607141  c-0.7678566,0.507143-1.228569,1.3660717-1.228569,2.2875004v6.4178562c0,0.9500008,0.4892845,1.8285713,1.2964287,2.3321419  l11.5035706,7.1357155v7.7821426c0,1.514286,1.2285728,2.7428589,2.7428551,2.7428589C62.7714272,53.2285728,64,52,64,50.485714  v-9.3071442C64,40.2285728,63.5107155,39.3499985,62.7035713,38.8464279z"/>
</svg>
