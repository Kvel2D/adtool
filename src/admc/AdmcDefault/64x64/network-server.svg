<?xml version="1.0" encoding="UTF-8"?>
<!-- Generator: Adobe Illustrator 24.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 64 64" style="enable-background:new 0 0 64 64;" xml:space="preserve"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script>
<style xmlns="http://www.w3.org/2000/svg" type="text/css">
	.st0{fill:#262626;}
</style>
<path xmlns="http://www.w3.org/2000/svg" class="st0" d="M60.2673073,18.3719406C62.5414772,16.4381809,64,13.6671228,64,10.5574379  c0-5.8215914-5.0179977-10.5592241-11.1860275-10.5592241H11.1860266C5.0179973-0.0017858,0,4.7358465,0,10.5574379  c0,3.1096849,1.4585228,5.880743,3.7326934,7.8145027C1.4585228,20.3057003,0,23.0767593,0,26.1864452  c0,5.8215923,5.0179973,10.5610104,11.1860266,10.5610104h18.0719337v7.9575882  c-3.2241974,0.9410973-5.745697,3.4625931-6.6870174,6.6856766H10.6538687c-1.514328,0-2.7429338,1.2286034-2.7429338,2.7429314  s1.2286057,2.7429352,2.7429338,2.7429352h11.9164038c1.1966858,4.1023483,4.9474602,7.1251984,9.4306202,7.1251984  s8.2339363-3.02285,9.4306221-7.1251984h11.91819c1.5143242,0,2.7429314-1.2286072,2.7429314-2.7429352  s-1.2286072-2.7429314-2.7429314-2.7429314H41.4308434c-0.9413223-3.2230835-3.4628181-5.7445793-6.6870155-6.6856766v-7.9575882  h18.0701447C58.9820023,36.7474556,64,32.0080376,64,26.1864452C64,23.0767593,62.5414772,20.3057003,60.2673073,18.3719406z   M36.3813705,54.1336517c0,2.4179268-1.9643402,4.382267-4.3804779,4.382267s-4.3804798-1.9643402-4.3804798-4.382267  c0-2.4143524,1.9643421-4.3786926,4.3804798-4.3786926S36.3813705,51.7192993,36.3813705,54.1336517z M5.4858675,10.5574379  c0-2.7982926,2.5572138-5.0733562,5.7001591-5.0733562h41.6279449c3.1429443,0,5.700161,2.2750635,5.700161,5.0733562  c0,2.7965059-2.5572166,5.0715694-5.700161,5.0715694H11.1860266C8.0430813,15.6290073,5.4858675,13.3539438,5.4858675,10.5574379z   M52.8139725,31.2598H11.1860266c-3.1429453,0-5.7001591-2.2750626-5.7001591-5.0733547  c0-2.7965069,2.5572138-5.0715694,5.7001591-5.0715694h41.6279449c3.1429443,0,5.700161,2.2750626,5.700161,5.0715694  C58.5141335,28.9847374,55.9569168,31.2598,52.8139725,31.2598z"/>
</svg>
